/**
 * Progress Page JavaScript
 * ƒ∞lerleme tablosu sayfasƒ± i≈ülevleri
 */

let dailyProgressChart = null;

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìä Progress page loaded');
    
    // Sayfa animasyonlarƒ±
    initializePageAnimations();
    
    // Period selector'ƒ± ayarla
    setupPeriodSelector();
    
    // Verileri y√ºkle
    loadProgressData();
});

// G√ºnl√ºk ilerleme verilerini y√ºkle
async function loadDailyProgress() {
    try {
        const response = await fetch('/api/progress/daily', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            // Eƒüer veri yoksa bo≈ü durum g√∂ster
            if (!data.daily_data || data.daily_data.length === 0) {
                showEmptyState('daily-progress-section', 'Hen√ºz ilerleme verisi bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!');
                return;
            }
            
            // ƒ∞statistikleri g√ºncelle
            updateDailyStats(data.summary);
            
            // Tabloyu olu≈ütur
            createDailyTable(data.daily_data);
        } else {
            showEmptyState('daily-progress-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
        }
    } catch (error) {
        console.error('G√ºnl√ºk ilerleme y√ºkleme hatasƒ±:', error);
        showEmptyState('daily-progress-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
    }
}

// Detaylƒ± ilerleme verilerini y√ºkle
async function loadDetailedProgress() {
    try {
        const response = await fetch('/api/progress/detailed', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            // Eƒüer veri yoksa bo≈ü durum g√∂ster
            if (!data.daily_data || data.daily_data.length === 0) {
                showEmptyState('detailed-progress-section', 'Hen√ºz ilerleme verisi bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!');
                return;
            }
            
            // Tabloyu olu≈ütur
            createDetailedTable(data.daily_data);
        } else {
            showEmptyState('detailed-progress-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
        }
    } catch (error) {
        console.error('Detaylƒ± ilerleme y√ºkleme hatasƒ±:', error);
        showEmptyState('detailed-progress-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
    }
}

// Konu detay verilerini y√ºkle
async function loadTopicDetail() {
    try {
        const response = await fetch('/api/progress/topics', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            // Eƒüer veri yoksa bo≈ü durum g√∂ster
            if (!data.topics || data.topics.length === 0) {
                showEmptyState('topic-detail-section', 'Hen√ºz konu verisi bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!');
                return;
            }
            
            // Tabloyu olu≈ütur
            createTopicDetailTable(data.topics);
        } else {
            showEmptyState('topic-detail-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
        }
    } catch (error) {
        console.error('Konu detay y√ºkleme hatasƒ±:', error);
        showEmptyState('topic-detail-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
    }
}

// Period selector event listeners
function setupPeriodSelector() {
    const periodBtns = document.querySelectorAll('.period-btn');
    periodBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // Remove active class from all buttons
            periodBtns.forEach(b => b.classList.remove('active'));
            // Add active class to clicked button
            this.classList.add('active');
            
            // Reload data with new period
            const period = this.dataset.period;
            loadDailyProgressWithPeriod(period);
        });
    });
}

// Load daily progress with specific period
async function loadDailyProgressWithPeriod(period) {
    try {
        const response = await fetch(`/api/progress/daily?period=${period}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            // Eƒüer veri yoksa bo≈ü durum g√∂ster
            if (!data.daily_data || data.daily_data.length === 0) {
                showEmptyState('daily-progress-section', 'Hen√ºz ilerleme verisi bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!');
                return;
            }
            
            updateDailyStats(data.summary);
            createDailyTable(data.daily_data);
        }
    } catch (error) {
        console.error('Period deƒüi≈ütirme hatasƒ±:', error);
    }
}

// G√ºnl√ºk istatistikleri g√ºncelle
function updateDailyStats(summary) {
    document.getElementById('mostActiveDay').textContent = summary.most_active_day || '-';
    document.getElementById('averageDaily').textContent = summary.average_daily || 0;
    document.getElementById('studyDays').textContent = summary.study_days || 0;
    document.getElementById('totalStudyTime').textContent = summary.total_study_time || 0;
}

// G√ºnl√ºk tabloyu olu≈ütur
function createDailyTable(dailyData) {
    const tbody = document.getElementById('dailyTableBody');
    
    if (!dailyData || dailyData.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6">
                    <div class="empty-state">
                        <div class="empty-state-icon">üìä</div>
                        <div class="empty-state-text">Hen√ºz ilerleme verisi bulunmuyor</div>
                        <div class="empty-state-subtext">Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!</div>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    let html = '';
    dailyData.forEach(day => {
        const successRate = day.solved > 0 ? Math.round((day.correct / day.solved) * 100) : 0;
        const successClass = successRate >= 80 ? 'high' : successRate >= 60 ? 'medium' : 'low';
        const pointsEarned = day.correct * 10; // Her doƒüru cevap 10 puan
        
        html += `
            <tr>
                <td class="date-cell">${new Date(day.date).toLocaleDateString('tr-TR')}</td>
                <td>${day.solved}</td>
                <td>${day.correct}</td>
                <td>${day.solved - day.correct}</td>
                <td class="success-rate ${successClass}">${successRate}%</td>
                <td>${pointsEarned}</td>
            </tr>
        `;
    });
    
    tbody.innerHTML = html;
}

// Detaylƒ± tabloyu olu≈ütur
function createDetailedTable(dailyData) {
    const tbody = document.getElementById('detailedTableBody');
    
    if (!dailyData || dailyData.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="8">
                    <div class="empty-state">
                        <div class="empty-state-icon">üìä</div>
                        <div class="empty-state-text">Hen√ºz ilerleme verisi bulunmuyor</div>
                        <div class="empty-state-subtext">Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!</div>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    let html = '';
    dailyData.forEach(day => {
        const successRate = day.solved > 0 ? Math.round((day.correct / day.solved) * 100) : 0;
        const successClass = successRate >= 80 ? 'high' : successRate >= 60 ? 'medium' : 'low';
        const pointsEarned = day.correct * 10; // Her doƒüru cevap 10 puan
        
        html += `
            <tr>
                <td class="date-cell">${new Date(day.date).toLocaleDateString('tr-TR')}</td>
                <td>${day.solved}</td>
                <td>${day.correct}</td>
                <td>${day.solved - day.correct}</td>
                <td class="success-rate ${successClass}">${successRate}%</td>
                <td>${pointsEarned}</td>
                <td>-</td>
                <td>-</td>
            </tr>
        `;
    });
    
    tbody.innerHTML = html;
}

// Konu detay tablosunu olu≈ütur
function createTopicDetailTable(topics) {
    const tbody = document.getElementById('topicDetailTableBody');
    
    if (!topics || topics.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7">
                    <div class="empty-state">
                        <div class="empty-state-icon">üìö</div>
                        <div class="empty-state-text">Hen√ºz konu verisi bulunmuyor</div>
                        <div class="empty-state-subtext">Quiz √ß√∂zmeye ba≈ülayarak verilerinizi g√∂r√ºn!</div>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    let html = '';
    topics.forEach(topic => {
        const successRate = topic.total_questions > 0 ? Math.round((topic.correct_questions / topic.total_questions) * 100) : 0;
        const successClass = successRate >= 80 ? 'high' : successRate >= 60 ? 'medium' : 'low';
        const status = successRate >= 80 ? '‚úÖ Tamamlandƒ±' : successRate >= 60 ? 'üîÑ Devam Ediyor' : '‚ùå Geli≈ütirilmeli';
        
        html += `
            <tr>
                <td>${topic.topic}</td>
                <td>${topic.total_questions}</td>
                <td>${topic.correct_questions}</td>
                <td>${topic.total_questions - topic.correct_questions}</td>
                <td class="success-rate ${successClass}">${successRate}%</td>
                <td>-</td>
                <td>${status}</td>
            </tr>
        `;
    });
    
    tbody.innerHTML = html;
}

// Sayfa animasyonlarƒ±
function initializePageAnimations() {
    const sections = document.querySelectorAll('.stats-overview, .achievements-history-section, .weekly-summary-section, .daily-progress-section, .detailed-progress-section, .topic-detail-section');
    
    sections.forEach((section, index) => {
        section.classList.add('fade-in');
        section.style.animationDelay = `${index * 0.2}s`;
    });
}

// Ana veri y√ºkleme fonksiyonu
async function loadProgressData() {
    try {
        // T√ºm verileri paralel olarak y√ºkle
        await Promise.all([
            loadOverviewStats(),
            loadDailyProgress(),
            loadDetailedProgress(),
            loadTopicDetail(),
            loadAchievementsHistory(),
            loadWeeklySummary()
        ]);
        
        console.log('‚úÖ T√ºm veriler ba≈üarƒ±yla y√ºklendi');
    } catch (error) {
        console.error('‚ùå Veri y√ºkleme hatasƒ±:', error);
        showNotification('Veriler y√ºklenirken hata olu≈ütu!', 'error');
    }
}

// Genel istatistikleri y√ºkle
async function loadOverviewStats() {
    try {
        const response = await fetch('/api/user/stats', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const stats = result.data;
            
            // ƒ∞statistikleri g√ºncelle
            updateStatElement('totalQuestionsSolved', stats.total_questions);
            updateStatElement('totalCorrectAnswers', stats.correct_questions);
            updateStatElement('successRate', `${stats.success_percentage}%`);
            updateStatElement('totalPoints', stats.total_points);
            
            // Animasyonlu g√ºncelleme
            animateStatUpdates();
        }
    } catch (error) {
        console.error('Genel istatistik y√ºkleme hatasƒ±:', error);
    }
}







// Ba≈üarƒ± ge√ßmi≈üini y√ºkle
async function loadAchievementsHistory() {
    try {
        const response = await fetch('/api/achievements', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const achievements = result.data.achievements;
            displayAchievementsHistory(achievements);
        } else {
            showEmptyState('achievements-history-section', 'Hen√ºz ba≈üarƒ± bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak ba≈üarƒ±larƒ±nƒ±zƒ± g√∂r√ºn!');
        }
    } catch (error) {
        console.error('Ba≈üarƒ± ge√ßmi≈üi y√ºkleme hatasƒ±:', error);
        showEmptyState('achievements-history-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
    }
}

// Ba≈üarƒ± ge√ßmi≈üini g√∂r√ºnt√ºle
function displayAchievementsHistory(achievements) {
    const container = document.getElementById('achievementsTimeline');
    
    if (achievements.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üèÜ</div>
                <div class="empty-state-text">Hen√ºz ba≈üarƒ± bulunmuyor</div>
                <div class="empty-state-subtext">Quiz √ß√∂zmeye ba≈ülayarak ba≈üarƒ±larƒ±nƒ±zƒ± g√∂r√ºn!</div>
            </div>
        `;
        return;
    }
    
    let html = '';
    achievements.forEach(achievement => {
        const date = new Date(achievement.earned_at).toLocaleDateString('tr-TR');
        
        html += `
            <div class="achievement-item">
                <div class="achievement-icon">
                    ${achievement.achievement_type === 'perfect_score' ? 'üèÜ' : '‚≠ê'}
                </div>
                <div class="achievement-info">
                    <div class="achievement-name">${achievement.achievement_name}</div>
                    <div class="achievement-date">Kazanƒ±ldƒ±: ${date}</div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// Haftalƒ±k √∂zeti y√ºkle
async function loadWeeklySummary() {
    try {
        const response = await fetch('/api/progress/weekly', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const weeks = result.data.weeks;
            displayWeeklySummary(weeks);
        } else {
            showEmptyState('weekly-summary-section', 'Hen√ºz haftalƒ±k veri bulunmuyor', 'Quiz √ß√∂zmeye ba≈ülayarak haftalƒ±k √∂zetinizi g√∂r√ºn!');
        }
    } catch (error) {
        console.error('Haftalƒ±k √∂zet y√ºkleme hatasƒ±:', error);
        showEmptyState('weekly-summary-section', 'Veri y√ºklenemedi', 'L√ºtfen sayfayƒ± yenileyin.');
    }
}

// Haftalƒ±k √∂zeti g√∂r√ºnt√ºle
function displayWeeklySummary(weeks) {
    const container = document.getElementById('weeklyCards');
    
    if (weeks.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìã</div>
                <div class="empty-state-text">Hen√ºz haftalƒ±k veri bulunmuyor</div>
                <div class="empty-state-subtext">Quiz √ß√∂zmeye ba≈ülayarak haftalƒ±k √∂zetinizi g√∂r√ºn!</div>
            </div>
        `;
        return;
    }
    
    let html = '';
    weeks.forEach(week => {
        const successRate = week.total_questions > 0 ? Math.round((week.correct_questions / week.total_questions) * 100) : 0;
        
        html += `
            <div class="weekly-card">
                <div class="weekly-header">
                    <span class="weekly-title">${week.week_title}</span>
                    <span class="weekly-date">${week.date_range}</span>
                </div>
                <div class="weekly-stats">
                    <div class="weekly-stat">
                        <span class="weekly-stat-value">${week.total_questions}</span>
                        <span class="weekly-stat-label">Toplam Soru</span>
                    </div>
                    <div class="weekly-stat">
                        <span class="weekly-stat-value">${week.correct_questions}</span>
                        <span class="weekly-stat-label">Doƒüru</span>
                    </div>
                    <div class="weekly-stat">
                        <span class="weekly-stat-value">${successRate}%</span>
                        <span class="weekly-stat-label">Ba≈üarƒ±</span>
                    </div>
                    <div class="weekly-stat">
                        <span class="weekly-stat-value">${week.points_earned}</span>
                        <span class="weekly-stat-label">Puan</span>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}



// ƒ∞statistik elementini g√ºncelle
function updateStatElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

// ƒ∞statistik g√ºncellemelerini animasyonlu yapma
function animateStatUpdates() {
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach((value, index) => {
        const finalValue = value.textContent;
        let currentValue = 0;
        
        // Eƒüer y√ºzde i≈üareti varsa, sadece sayƒ±yƒ± al
        const isPercentage = finalValue.includes('%');
        const numericValue = isPercentage ? parseFloat(finalValue) : parseInt(finalValue);
        
        if (isNaN(numericValue)) return;
        
        const increment = numericValue / 20; // 20 adƒ±mda artƒ±r
        const timer = setInterval(() => {
            currentValue += increment;
            if (currentValue >= numericValue) {
                currentValue = numericValue;
                clearInterval(timer);
            }
            
            if (isPercentage) {
                value.textContent = `${Math.floor(currentValue)}%`;
            } else {
                value.textContent = Math.floor(currentValue);
            }
        }, 50 + (index * 10)); // Her istatistik i√ßin farklƒ± hƒ±z
    });
}

// Bo≈ü durum g√∂ster
function showEmptyState(sectionId, title, subtitle) {
    const section = document.querySelector(`#${sectionId}`);
    if (section) {
        // Eƒüer content bulunamazsa, section'ƒ± g√ºncelle
        section.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìä</div>
                <div class="empty-state-text">${title}</div>
                <div class="empty-state-subtext">${subtitle}</div>
            </div>
        `;
    }
}

// Bildirim g√∂sterme fonksiyonu
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#F44336' : '#2196F3'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        z-index: 10000;
        animation: slideInRight 0.3s ease-out;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease-out';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
} 